name: build-push-deploy
on: 
  push:
    branches: 
      - main
      - pipeline-test
env:
  REGISTRY: ghcr.io
  REPOSITORY: ablockofficial/ablock.docs
  PROJECT_ID: a-block-platform
  REGION: europe-west6
  CLUSTER_NAME: a-cluster
  DEPLOYMENT: a-block-io
  GCLOUD_KEY: <GCLOUD_KEY>

permissions:
  contents: read
  packages: write

jobs:
  build-push:
    name: Build local context and push image
    runs-on: ubuntu-latest
    steps:

    - name: Setup dpcker buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Check out the repo
      uses: actions/checkout@v3

    - name: Log in to the Container registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      id: build-and-push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest
          ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to the A-Block platform
    needs: build-push
    runs-on: ubuntu-latest
    steps:

    - name: 'Authenticate to gcp'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCLOUD_KEY }}

    - name: Install gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure kubectl
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set compute/region ${{ env.REGION }}
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }}
    
    - name: Restart deployment
      run: |
        kubectl rollout restart deployment/$DEPLOYMENT


  # sign:
  #   name: Sign latest built image
  #   needs: build-push
  #   runs-on: ubuntu-latest
  #   steps: 
  #   - name: Extract metadata (tags, labels) for Docker
  #     id: meta
  #     uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
  #   - name: Install cosign
  #     if: github.event_name != 'pull_request'
  #     uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
  #     with:
  #       cosign-release: 'v2.1.1'
  #   - name: Sign the published Docker image
  #     if: ${{ github.event_name != 'pull_request' }}
  #     env:
  #       TAGS: ${{ steps.meta.outputs.tags }}
  #       DIGEST: ${{ jobs.build-push.steps.build-abnd-push.outputs.digest }}
  #     run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}